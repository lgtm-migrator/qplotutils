#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
===================================
Test for qplotutils.wireframe.items
===================================



Autogenerated package stub.
"""
import pytest
from pytestqt.qtbot import QtBot
import logging
import sys
import os
import numpy as np

from qtpy.QtCore import *
from qtpy.QtGui import *
from qtpy.QtOpenGL import *
from qtpy.QtWidgets import *

from qplotutils.wireframe.items import *
from qplotutils.wireframe.items import Grid
from qplotutils.wireframe.view import ChartView3d

__author__ = "Philipp Baust"
__copyright__ = "Copyright 2019, Philipp Baust"
__credits__ = []
__license__ = "MIT"
__version__ = "0.0.2"
__maintainer__ = "Philipp Baust"
__email__ = "philipp.baust@gmail.com"
__status__ = "Development"

_log = logging.getLogger(__name__)


@pytest.fixture()
def chartwidget3d(qtbot : QtBot):
    w = ChartView3d()
    w.resize(800, 800)
    qtbot.addWidget(w)
    w.show()


    w.props.distance = 10

    return w


DELAY = 200

class TestBox(object):

    def test_paint(self, chartwidget3d: ChartView3d, qtbot: QtBot):
        """ Tests for paint

        """
        # box is depracated nonetheless
        box = Box()
        chartwidget3d.addItem(box)
        qtbot.wait(DELAY)


class TestCoordinateCross(object):

    def test_paint(self, chartwidget3d: ChartView3d,  qtbot: QtBot):
        """ Tests for paint

        """
        item = CoordinateCross()
        chartwidget3d.addItem(item)
        qtbot.wait(DELAY)


class TestGLGraphicsItem(object):

    def test_applyGLOptions(self, qtbot: QtBot):
        """ Tests for applyGLOptions

        """
        # Autogenerated test skeleton for applyGLOptions
        pass

    def test_applyTransform(self, qtbot: QtBot):
        """ Tests for applyTransform

        """
        # Autogenerated test skeleton for applyTransform
        pass

    def test_childItems(self, qtbot: QtBot):
        """ Tests for childItems

        """
        # Autogenerated test skeleton for childItems
        pass

    def test_hide(self, qtbot: QtBot):
        """ Tests for hide

        """
        # Autogenerated test skeleton for hide
        pass

    def test_initializeGL(self, qtbot: QtBot):
        """ Tests for initializeGL

        """
        # Autogenerated test skeleton for initializeGL
        pass

    def test_mapFromParent(self, qtbot: QtBot):
        """ Tests for mapFromParent

        """
        # Autogenerated test skeleton for mapFromParent
        pass

    def test_mapFromView(self, qtbot: QtBot):
        """ Tests for mapFromView

        """
        # Autogenerated test skeleton for mapFromView
        pass

    def test_mapToParent(self, qtbot: QtBot):
        """ Tests for mapToParent

        """
        # Autogenerated test skeleton for mapToParent
        pass

    def test_mapToView(self, qtbot: QtBot):
        """ Tests for mapToView

        """
        # Autogenerated test skeleton for mapToView
        pass

    def test_paint(self, qtbot: QtBot):
        """ Tests for paint

        """
        # Autogenerated test skeleton for paint
        pass

    def test_parentItem(self, qtbot: QtBot):
        """ Tests for parentItem

        """
        # Autogenerated test skeleton for parentItem
        pass

    def test_resetTransform(self, qtbot: QtBot):
        """ Tests for resetTransform

        """
        # Autogenerated test skeleton for resetTransform
        pass

    def test_rotate(self, qtbot: QtBot):
        """ Tests for rotate

        """
        # Autogenerated test skeleton for rotate
        pass

    def test_scale(self, qtbot: QtBot):
        """ Tests for scale

        """
        # Autogenerated test skeleton for scale
        pass

    def test_setGLOptions(self, qtbot: QtBot):
        """ Tests for setGLOptions

        """
        # Autogenerated test skeleton for setGLOptions
        pass

    def test_setParentItem(self, qtbot: QtBot):
        """ Tests for setParentItem

        """
        # Autogenerated test skeleton for setParentItem
        pass

    def test_setTransform(self, qtbot: QtBot):
        """ Tests for setTransform

        """
        # Autogenerated test skeleton for setTransform
        pass

    def test_setVisible(self, qtbot: QtBot):
        """ Tests for setVisible

        """
        # Autogenerated test skeleton for setVisible
        pass

    def test_show(self, qtbot: QtBot):
        """ Tests for show

        """
        # Autogenerated test skeleton for show
        pass

    def test_transform(self, qtbot: QtBot):
        """ Tests for transform

        """
        # Autogenerated test skeleton for transform
        pass

    def test_translate(self, qtbot: QtBot):
        """ Tests for translate

        """
        # Autogenerated test skeleton for translate
        pass

    def test_update(self, qtbot: QtBot):
        """ Tests for update

        """
        # Autogenerated test skeleton for update
        pass

    def test_updateGLOptions(self, qtbot: QtBot):
        """ Tests for updateGLOptions

        """
        # Autogenerated test skeleton for updateGLOptions
        pass

    def test_view(self, qtbot: QtBot):
        """ Tests for view

        """
        # Autogenerated test skeleton for view
        pass

    def test_viewTransform(self, qtbot: QtBot):
        """ Tests for viewTransform

        """
        # Autogenerated test skeleton for viewTransform
        pass

    def test_visible(self, qtbot: QtBot):
        """ Tests for visible

        """
        # Autogenerated test skeleton for visible
        pass


class TestGrid(object):

    def test_paint(self, chartwidget3d: ChartView3d, qtbot: QtBot):
        """ Tests for paint

        """
        item = Grid()
        chartwidget3d.addItem(item)
        qtbot.wait(DELAY)


class TestMesh(object):

    def test_compute_face_arrays(self):
        """ Tests for compute_face_arrays
        
        """
        # Autogenerated test skeleton for compute_face_arrays
        pass

    def test_cone(self, chartwidget3d: ChartView3d, qtbot: QtBot):
        """ Tests for cone
        
        """
        b = MeshItem(Mesh.cone(), shader='shaded')
        b.translate(2, 2, 0)

        chartwidget3d.addItem(b)
        qtbot.wait(DELAY)

    def test_cube(self, chartwidget3d: ChartView3d, qtbot: QtBot):
        """ Tests for cube
        
        """
        b = MeshItem(Mesh.cube(2), shader='shaded')
        b.translate(2, 2, 0)


        chartwidget3d.addItem(b)
        qtbot.wait(DELAY)

    def test_face_normal_vectors(self, chartwidget3d: ChartView3d, qtbot: QtBot):
        """ Tests for face_normal_vectors
        
        """
        # Autogenerated test skeleton for face_normal_vectors
        pass

    def test_sphere(self, chartwidget3d: ChartView3d, qtbot: QtBot):
        """ Tests for sphere
        
        """
        b = MeshItem(Mesh.sphere(), shader='shaded')
        b.translate(2, 2, 0)

        chartwidget3d.addItem(b)
        qtbot.wait(DELAY)


class TestMeshItem(object):

    def test_initializeGL(self, qtbot: QtBot):
        """ Tests for initializeGL

        """
        # Autogenerated test skeleton for initializeGL
        pass

    def test_paint(self, qtbot: QtBot):
        """ Tests for paint

        """
        # Autogenerated test skeleton for paint
        pass