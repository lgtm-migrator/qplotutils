#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
=========================
Test for qplotutils.bench
=========================



Autogenerated package stub.
"""
import pytest
from pytestqt.qtbot import QtBot
import logging
import sys
import os
import numpy as np
import tempfile

from qtpy.QtCore import *
from qtpy.QtGui import *
from qtpy.QtOpenGL import *
from qtpy.QtWidgets import *

from qplotutils import Configuration
from qplotutils.bench import *

__author__ = "Philipp Baust"
__copyright__ = "Copyright 2019, Philipp Baust"
__credits__ = []
__license__ = "MIT"
__version__ = "0.0.2"
__maintainer__ = "Philipp Baust"
__email__ = "philipp.baust@gmail.com"
__status__ = "Development"

_log = logging.getLogger(__name__)


DISPLAY_LENGTH = 200 # ms


class TestAbstractContainer(object):

    def test_addItem(self, qtbot: QtBot):
        """ Tests for addItem

        """
        # Autogenerated test skeleton for addItem
        pass

    def test_containers(self, qtbot: QtBot):
        """ Tests for containers

        """
        # Autogenerated test skeleton for containers
        pass

    def test_docks(self, qtbot: QtBot):
        """ Tests for docks

        """
        # Autogenerated test skeleton for docks
        pass

    def test_flatContainerList(self, qtbot: QtBot):
        """ Tests for flatContainerList

        """
        # Autogenerated test skeleton for flatContainerList
        pass

    def test_flatDockList(self, qtbot: QtBot):
        """ Tests for flatDockList

        """
        # Autogenerated test skeleton for flatDockList
        pass


class TestBench(object):

    def test_Bench__contentModified(self, qtbot: QtBot):
        """ Tests for Bench__contentModified

        """
        # Autogenerated test skeleton for Bench__contentModified
        pass

    def test_addDock(self, qtbot: QtBot):
        """ Tests for addDock

        """
        dut = Bench()
        qtbot.addWidget(dut)
        dut.resize(800, 800)
        dut.show()

        ref_dock = Dock("dock_ref")
        dut.addDock(ref_dock)

        assert len(dut.docks) == 1

        for p in Placement.options_list:
            if p == Placement.TAB:
                continue

            _log.debug("Added with absolute placement: {}".format(p))
            d = Dock("Dock at {}".format(p))
            dut.addDock(d, placement=p)

        assert len(dut.docks) == 5

        for p in Placement.options_list:
            _log.debug("Added with relative placement: {}".format(p))
            d = Dock("Dock at {}".format(p))
            dut.addDock(d, placement=p, ref=ref_dock)

        assert len(dut.docks) == 10

        qtbot.wait(DISPLAY_LENGTH)

    def test_addDock_wrong_usage(self, qtbot: QtBot):
        dut = Bench()
        qtbot.addWidget(dut)
        dut.resize(800, 800)
        dut.show()

        ref_dock = Dock("dock_ref")
        dut.addDock(ref_dock)

        d = Dock("Dock")
        with pytest.raises(BenchException):
            dut.addDock(d, placement=Placement.TAB)

        assert len(dut.docks) == 1

        # Check that the exception has no bad side effects
        dut.addDock(d, placement=Placement.BOTTOM)
        assert len(dut.docks) == 2


    def test_clearAll(self, qtbot: QtBot):
        """ Tests for clearAll

        """
        dut = Bench()
        qtbot.addWidget(dut)
        dut.resize(800, 800)
        dut.show()

        ref_dock = Dock("dock_ref")
        dut.addDock(ref_dock)

        for p in Placement.options_list:
            _log.debug("Added with relative placement: {}".format(p))
            d = Dock("Dock at {}".format(p))
            dut.addDock(d, placement=p, ref=ref_dock)

        qtbot.wait(DISPLAY_LENGTH)
        assert len(dut.docks) == 6

        dut.clearAll()
        qtbot.wait(DISPLAY_LENGTH)
        assert len(dut.docks) == 0

        assert dut.getDock(ref_dock.uid) is None

    def test_dockMove(self, qtbot: QtBot):
        """ Tests for dockMove

        """
        dut = Bench()
        qtbot.addWidget(dut)
        dut.resize(800, 800)
        dut.show()

        ref_dock = Dock("dock_ref")
        dut.addDock(ref_dock)

        dock = Dock("dock")
        dut.addDock(dock, placement=Placement.RIGHT)

        qtbot.wait(DISPLAY_LENGTH)

        dut.dockMove(dock.uid, Placement.BOTTOM, ref_uid=ref_dock.uid)

        qtbot.wait(DISPLAY_LENGTH)

        dut.dockMove(dock.uid, Placement.LEFT, ref_uid=ref_dock.uid)

        qtbot.wait(DISPLAY_LENGTH)

        dut.dockMove(dock.uid, Placement.TAB, ref_uid=ref_dock.uid)

        qtbot.wait(DISPLAY_LENGTH)

    def test_getDock(self, qtbot: QtBot):
        """ Tests for getDock

        """
        dut = Bench()
        qtbot.addWidget(dut)
        dut.resize(800, 800)
        dut.show()

        ref_dock = Dock("dock_ref")
        dut.addDock(ref_dock)

        dock = Dock("dock")
        dut.addDock(dock, placement=Placement.RIGHT)

        qtbot.wait(DISPLAY_LENGTH)

        r = dut.getDock(dock.uid)
        assert dock == r

    def test_removeDock(self, qtbot: QtBot):
        """ Tests for removeDock

        """
        dut = Bench()
        qtbot.addWidget(dut)
        dut.resize(800, 800)
        dut.show()

        ref_dock = Dock("dock_ref")
        dut.addDock(ref_dock)

        dock = Dock("dock")
        dut.addDock(dock)

        qtbot.wait(DISPLAY_LENGTH)

        dut.removeDock(dock)

        qtbot.wait(DISPLAY_LENGTH)

    def test_save_load_layout(self, qtbot: QtBot):
        """ Tests for saveLayout

        """
        # Autogenerated test skeleton for saveLayout
        dut = Bench()
        qtbot.addWidget(dut)
        dut.resize(800, 800)
        dut.show()

        ref_dock = Dock("dock_ref")
        dut.addDock(ref_dock)

        assert len(dut.docks) == 1

        for p in Placement.options_list:
            _log.debug("Added with relative placement: {}".format(p))
            d = Dock("Dock at {}".format(p))
            dut.addDock(d, placement=p, ref=ref_dock)

        assert len(dut.docks) == 6
        qtbot.wait(DISPLAY_LENGTH)

        tmp =  os.path.join(tempfile.gettempdir(), "layout.json")
        l = dut.saveLayout(tmp)

        qtbot.wait(DISPLAY_LENGTH)

        dut.clearAll()
        assert len(dut.docks) == 0
        qtbot.wait(DISPLAY_LENGTH)

        dut.loadLayout(tmp)
        assert len(dut.docks) == 6
        qtbot.wait(DISPLAY_LENGTH)


class TestBenchException(object):
    # autogenerator: no functions found
    pass


class TestBenchItem(object):

    def test_loadLayout(self, qtbot: QtBot):
        """ Tests for loadLayout

        """
        # Autogenerated test skeleton for loadLayout
        pass

    def test_paintEvent(self, qtbot: QtBot):
        """ Tests for paintEvent

        """
        # Autogenerated test skeleton for paintEvent
        pass

    def test_parentContainer(self, qtbot: QtBot):
        """ Tests for parentContainer

        """
        # Autogenerated test skeleton for parentContainer
        pass

    def test_saveLayout(self, qtbot: QtBot):
        """ Tests for saveLayout

        """
        # Autogenerated test skeleton for saveLayout
        pass

    def test_uid(self, qtbot: QtBot):
        """ Tests for uid

        """
        # Autogenerated test skeleton for uid
        pass


class TestDock(object):

    def test_addWidget(self, qtbot: QtBot):
        """ Tests for addWidget

        """
        dut = Bench()
        qtbot.addWidget(dut)
        dut.resize(800, 800)
        dut.show()

        ref_dock = Dock("dock_ref")
        dut.addDock(ref_dock)

        CONFIG.debug = True
        CONFIG.debug_layout = True

        qtbot.wait(DISPLAY_LENGTH)

        c = Configuration()
        c.debug_layout = False
        c.debug = False
        dut.update()

        assert CONFIG.debug == False

        qtbot.wait(DISPLAY_LENGTH)

    def test_closeEvent(self, qtbot: QtBot):
        """ Tests for closeEvent

        """
        # Autogenerated test skeleton for closeEvent
        pass

    def test_loadLayout(self, qtbot: QtBot):
        """ Tests for loadLayout

        """
        # Autogenerated test skeleton for loadLayout
        pass

    def test_mousePressEvent(self, qtbot: QtBot):
        """ Tests for mousePressEvent

        """
        # Autogenerated test skeleton for mousePressEvent
        pass

    def test_saveLayout(self, qtbot: QtBot):
        """ Tests for saveLayout

        """
        # Autogenerated test skeleton for saveLayout
        pass

    def test_tab(self, qtbot: QtBot):
        """ Tests for tab

        """
        # Autogenerated test skeleton for tab
        pass

    def test_title(self, qtbot: QtBot):
        """ Tests for title

        """
        # Autogenerated test skeleton for title
        pass


class TestDropOverlay(object):

    def test_paintAbsDropIcon(self, qtbot: QtBot):
        """ Tests for paintAbsDropIcon

        """
        # Autogenerated test skeleton for paintAbsDropIcon
        pass

    def test_paintRefDropIcon(self, qtbot: QtBot):
        """ Tests for paintRefDropIcon

        """
        # Autogenerated test skeleton for paintRefDropIcon
        pass

    def test_paintEvent(self, qtbot: QtBot):
        """ Tests for paintEvent

        """
        # Autogenerated test skeleton for paintEvent
        pass

    def test_setActiveDropRegion(self, qtbot: QtBot):
        """ Tests for setActiveDropRegion

        """
        # Autogenerated test skeleton for setActiveDropRegion
        pass


class TestPlacement(object):
    # autogenerator: no functions found
    pass


class TestSplitterContainer(object):

    def test_addItem(self, qtbot: QtBot):
        """ Tests for addItem

        """
        # Autogenerated test skeleton for addItem
        pass

    def test_closeChild(self, qtbot: QtBot):
        """ Tests for closeChild

        """
        # Autogenerated test skeleton for closeChild
        pass

    def test_containers(self, qtbot: QtBot):
        """ Tests for containers

        """
        # Autogenerated test skeleton for containers
        pass

    def test_flatContainerList(self, qtbot: QtBot):
        """ Tests for flatContainerList

        """
        # Autogenerated test skeleton for flatContainerList
        pass

    def test_flatDockList(self, qtbot: QtBot):
        """ Tests for flatDockList

        """
        # Autogenerated test skeleton for flatDockList
        pass

    def test_indexOf(self, qtbot: QtBot):
        """ Tests for indexOf

        """
        # Autogenerated test skeleton for indexOf
        pass

    def test_loadLayout(self, qtbot: QtBot):
        """ Tests for loadLayout

        """
        # Autogenerated test skeleton for loadLayout
        pass

    def test_orientation(self, qtbot: QtBot):
        """ Tests for orientation

        """
        # Autogenerated test skeleton for orientation
        pass

    def test_saveLayout(self, qtbot: QtBot):
        """ Tests for saveLayout

        """
        # Autogenerated test skeleton for saveLayout
        pass


class TestTab(object):

    def test_closeClick(self, qtbot: QtBot):
        """ Tests for closeClick

        """
        # Autogenerated test skeleton for closeClick
        pass

    def test_customContextMenu(self, qtbot: QtBot):
        """ Tests for customContextMenu

        """
        dut = Bench()
        qtbot.addWidget(dut)
        dut.resize(800, 800)
        dut.show()

        ref_dock = Dock("dock_ref")
        dut.addDock(ref_dock)

        qtbot.wait(DISPLAY_LENGTH)

        assert isinstance(ref_dock.tab, Tab)

        qtbot.mouseClick(ref_dock.tab, Qt.RightButton)

        qtbot.wait(2000)


    def test_dockProperties(self, qtbot: QtBot):
        """ Tests for dockProperties

        """
        # Autogenerated test skeleton for dockProperties
        pass

    def test_active(self, qtbot: QtBot):
        """ Tests for active

        """
        # Autogenerated test skeleton for active
        pass

    def test_mouseMoveEvent(self, qtbot: QtBot):
        """ Tests for mouseMoveEvent

        """
        # Autogenerated test skeleton for mouseMoveEvent
        pass

    def test_mousePressEvent(self, qtbot: QtBot):
        """ Tests for mousePressEvent

        """
        # Autogenerated test skeleton for mousePressEvent
        pass

    def test_mouseReleaseEvent(self, qtbot: QtBot):
        """ Tests for mouseReleaseEvent

        """
        # Autogenerated test skeleton for mouseReleaseEvent
        pass

    def test_paintEvent(self, qtbot: QtBot):
        """ Tests for paintEvent

        """
        # Autogenerated test skeleton for paintEvent
        pass

    def test_setActive(self, qtbot: QtBot):
        """ Tests for setActive

        """
        # Autogenerated test skeleton for setActive
        pass

    def test_title(self, qtbot: QtBot):
        """ Tests for title

        """
        # Autogenerated test skeleton for title
        pass

    def test_uid(self, qtbot: QtBot):
        """ Tests for uid

        """
        # Autogenerated test skeleton for uid
        pass


class TestTabContainer(object):

    def test_activateTab(self, qtbot: QtBot):
        """ Tests for activateTab

        """
        # Autogenerated test skeleton for activateTab
        pass

    def test_addItem(self, qtbot: QtBot):
        """ Tests for addItem

        """
        # Autogenerated test skeleton for addItem
        pass

    def test_closeChild(self, qtbot: QtBot):
        """ Tests for closeChild

        """
        # Autogenerated test skeleton for closeChild
        pass

    def test_docks(self, qtbot: QtBot):
        """ Tests for docks

        """
        # Autogenerated test skeleton for docks
        pass

    def test_drag_and_drop(self, qtbot: QtBot):
        dut = Bench()
        qtbot.addWidget(dut)
        dut.resize(800, 800)
        dut.show()

        ref_dock = Dock("dock_ref")
        dut.addDock(ref_dock)

        dock = Dock("dock_dnd")
        dut.addDock(dock, Placement.TAB, ref=ref_dock)

        qtbot.wait(DISPLAY_LENGTH)

        tab_container = dock.parentContainer
        assert isinstance(tab_container, TabContainer)

        # # Check wrong type
        # wrong_mime_type = "application/x-wrongtype"
        # mimeData = QMimeData()
        # encodedData = QByteArray(pickle.dumps(dock.uid))
        # mimeData.setData(wrong_mime_type, encodedData)
        #
        # event = QDragEnterEvent(QPoint(0, 0), Qt.MoveAction, mimeData, Qt.LeftButton,
        #                         Qt.NoModifier)
        # tab_container.dragEnterEvent(event)
        #
        # # drag in dock_0 which is already part of that tab
        # mimeData = QMimeData()
        # encodedData = QByteArray(pickle.dumps(dock.uid))
        # mimeData.setData(MIME_TYPE, encodedData)
        #
        # event = QDragEnterEvent(QPoint(0, 0), Qt.MoveAction, mimeData, Qt.LeftButton,
        #                         Qt.NoModifier)
        # tab_container.dragEnterEvent(event)

        # correct type
        mimeData = QMimeData()
        encodedData = QByteArray(pickle.dumps(dock.uid))
        mimeData.setData(MIME_TYPE, encodedData)

        event = QDragEnterEvent(QPoint(0, 0), Qt.MoveAction, mimeData, Qt.LeftButton,
                                Qt.NoModifier)

        tab_container.dragEnterEvent(event)
        qtbot.wait(DISPLAY_LENGTH)
        assert tab_container.overlay.isHidden() is False

        for region in tab_container.refDropRegions:
            p = QPoint(region.x() - 6, region.y() + 6)
            event_move = QDragMoveEvent(p, Qt.MoveAction,
                                        mimeData, Qt.LeftButton, Qt.NoModifier)

            tab_container.dragMoveEvent(event_move)
            qtbot.wait(200)

            placement = tab_container.overlay._activeRelativeRegion
            assert placement == tab_container.refDropRegions[region]

        for region in tab_container.absDropRegions:
            p = QPoint(region.x() - 6, region.y() + 6)
            event_move = QDragMoveEvent(p, Qt.MoveAction,
                                        mimeData, Qt.LeftButton, Qt.NoModifier)

            tab_container.dragMoveEvent(event_move)
            qtbot.wait(200)

            placement = tab_container.overlay._activeAbsoluteRegion
            assert placement == tab_container.absDropRegions[region]

        # now drop
        region = list(tab_container.absDropRegions.keys())[0]
        p = QPoint(region.x() - 6, region.y() + 6)
        event_move = QDragMoveEvent(p, Qt.MoveAction,
                                    mimeData, Qt.LeftButton, Qt.NoModifier)

        tab_container.dragMoveEvent(event_move)
        qtbot.wait(DISPLAY_LENGTH)

        event_drop = QDropEvent(p, Qt.MoveAction, mimeData,
                                 Qt.LeftButton,
                                 Qt.NoModifier)
        tab_container.dropEvent(event_drop)

        qtbot.wait(DISPLAY_LENGTH)
        assert len(tab_container.docks) == 1



    def test_dragEnterEvent(self, qtbot: QtBot):
        """ Tests for dragEnterEvent

        """
        # Autogenerated test skeleton for dragEnterEvent
        pass

    def test_dragLeaveEvent(self, qtbot: QtBot):
        """ Tests for dragLeaveEvent

        """
        # Autogenerated test skeleton for dragLeaveEvent
        pass

    def test_dragMoveEvent(self, qtbot: QtBot):
        """ Tests for dragMoveEvent

        """
        # Autogenerated test skeleton for dragMoveEvent
        pass

    def test_dropEvent(self, qtbot: QtBot):
        """ Tests for dropEvent

        """
        # Autogenerated test skeleton for dropEvent
        pass

    def test_flatDockList(self, qtbot: QtBot):
        """ Tests for flatDockList

        """
        # Autogenerated test skeleton for flatDockList
        pass

    def test_loadLayout(self, qtbot: QtBot):
        """ Tests for loadLayout

        """
        # Autogenerated test skeleton for loadLayout
        pass

    def test_saveLayout(self, qtbot: QtBot):
        """ Tests for saveLayout

        """
        # Autogenerated test skeleton for saveLayout
        pass


class TestTabHeader(object):

    def test_addTab(self, qtbot: QtBot):
        """ Tests for addTab

        """
        # Autogenerated test skeleton for addTab
        pass

    def test_getTab(self, qtbot: QtBot):
        """ Tests for getTab

        """
        # Autogenerated test skeleton for getTab
        pass

    def test_tabs(self, qtbot: QtBot):
        """ Tests for tabs

        """
        # Autogenerated test skeleton for tabs
        pass