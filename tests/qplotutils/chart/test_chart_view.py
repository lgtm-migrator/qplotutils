#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
==============================
Test for qplotutils.chart.view
==============================



Autogenerated package stub.
"""
import pytest
from pytestqt.qtbot import QtBot
import logging
import sys
import os
import numpy as np

from qtpy.QtCore import *
from qtpy.QtGui import *
from qtpy.QtOpenGL import *
from qtpy.QtWidgets import *

from qplotutils.chart.items import LineChartItem
from qplotutils.chart.view import *

__author__ = "Philipp Baust"
__copyright__ = "Copyright 2019, Philipp Baust"
__credits__ = []
__license__ = "MIT"
__version__ = "0.0.2"
__maintainer__ = "Philipp Baust"
__email__ = "philipp.baust@gmail.com"
__status__ = "Development"

_log = logging.getLogger(__name__)

@pytest.fixture()
def view(qtbot : QtBot):
    view = ChartView(orientation=ChartView.CARTESIAN)
    view.resize(800, 800)
    view.show()

    qtbot.addWidget(view)

    return  view

DELAY = 4000

class TestChartArea(object):

    def test_ChartArea__pan(self, qtbot: QtBot):
        """ Tests for ChartArea__pan

        """
        # Autogenerated test skeleton for ChartArea__pan
        pass

    def test_calcVisibleRange(self, qtbot: QtBot):
        """ Tests for calcVisibleRange

        """
        # Autogenerated test skeleton for calcVisibleRange
        pass

    def test_adjustRange(self, qtbot: QtBot):
        """ Tests for adjustRange

        """
        # Autogenerated test skeleton for adjustRange
        pass

    def test_aspectRatio(self, qtbot: QtBot):
        """ Tests for aspectRatio

        """
        # Autogenerated test skeleton for aspectRatio
        pass

    def test_autoRange(self, qtbot: QtBot):
        """ Tests for autoRange

        """
        # Autogenerated test skeleton for autoRange
        pass

    def test_axisChange(self, qtbot: QtBot):
        """ Tests for axisChange

        """
        # Autogenerated test skeleton for axisChange
        pass

    def test_boundingRect(self, qtbot: QtBot):
        """ Tests for boundingRect

        """
        # Autogenerated test skeleton for boundingRect
        pass

    def test_getRootItem(self, qtbot: QtBot):
        """ Tests for getRootItem

        """
        # Autogenerated test skeleton for getRootItem
        pass

    def test_keyPressEvent(self, qtbot: QtBot):
        """ Tests for keyPressEvent

        """
        # Autogenerated test skeleton for keyPressEvent
        pass

    def test_mouseDoubleClickEvent(self, qtbot: QtBot):
        """ Tests for mouseDoubleClickEvent

        """
        # Autogenerated test skeleton for mouseDoubleClickEvent
        pass

    def test_mouseMoveEvent(self, qtbot: QtBot):
        """ Tests for mouseMoveEvent

        """
        # Autogenerated test skeleton for mouseMoveEvent
        pass

    def test_mousePressEvent(self, qtbot: QtBot):
        """ Tests for mousePressEvent

        """
        # Autogenerated test skeleton for mousePressEvent
        pass

    def test_mouseReleaseEvent(self, qtbot: QtBot):
        """ Tests for mouseReleaseEvent

        """
        # Autogenerated test skeleton for mouseReleaseEvent
        pass

    def test_paint(self, qtbot: QtBot):
        """ Tests for paint

        """
        # Autogenerated test skeleton for paint
        pass

    def test_resizeEvent(self, qtbot: QtBot):
        """ Tests for resizeEvent

        """
        # Autogenerated test skeleton for resizeEvent
        pass

    def test_setAspectRatio(self, qtbot: QtBot):
        """ Tests for setAspectRatio

        """
        # Autogenerated test skeleton for setAspectRatio
        pass

    def test_setMaxVisibleRange(self, qtbot: QtBot):
        """ Tests for setMaxVisibleRange

        """
        # Autogenerated test skeleton for setMaxVisibleRange
        pass

    def test_setRange(self, qtbot: QtBot):
        """ Tests for setRange

        """
        # Autogenerated test skeleton for setRange
        pass

    def test_showEvent(self, qtbot: QtBot):
        """ Tests for showEvent

        """
        # Autogenerated test skeleton for showEvent
        pass

    def test_wheelEvent(self, qtbot: QtBot):
        """ Tests for wheelEvent

        """
        # Autogenerated test skeleton for wheelEvent
        pass


class TestChartAxis(object):

    def test_generatePicture(self, qtbot: QtBot):
        """ Tests for generatePicture

        """
        # Autogenerated test skeleton for generatePicture
        pass

    def test_refreshPicture(self, qtbot: QtBot):
        """ Tests for refreshPicture

        """
        # Autogenerated test skeleton for refreshPicture
        pass

    def test_axisChange(self, qtbot: QtBot):
        """ Tests for axisChange

        """
        # Autogenerated test skeleton for axisChange
        pass

    def test_boundingRect(self, qtbot: QtBot):
        """ Tests for boundingRect

        """
        # Autogenerated test skeleton for boundingRect
        pass

    def test_calcTicks(self, qtbot: QtBot):
        """ Tests for calcTicks

        """
        # Autogenerated test skeleton for calcTicks
        pass

    def test_paint(self, qtbot: QtBot):
        """ Tests for paint

        """
        # Autogenerated test skeleton for paint
        pass

    def test_resizeEvent(self, qtbot: QtBot):
        """ Tests for resizeEvent

        """
        # Autogenerated test skeleton for resizeEvent
        pass


class TestChartLabel(object):

    def test_generatePicture(self, qtbot: QtBot):
        """ Tests for generatePicture

        """
        # Autogenerated test skeleton for generatePicture
        pass

    def test_refreshPicture(self, qtbot: QtBot):
        """ Tests for refreshPicture

        """
        # Autogenerated test skeleton for refreshPicture
        pass

    def test_paint(self, qtbot: QtBot):
        """ Tests for paint

        """
        # Autogenerated test skeleton for paint
        pass

    def test_resizeEvent(self, qtbot: QtBot):
        """ Tests for resizeEvent

        """
        # Autogenerated test skeleton for resizeEvent
        pass


class TestChartLegend(object):

    def test_generatePicture(self):
        """ Tests for generatePicture
        
        """
        # Autogenerated test skeleton for generatePicture
        pass

    def test_updateBoundingRect(self):
        """ Tests for updateBoundingRect
        
        """
        # Autogenerated test skeleton for updateBoundingRect
        pass

    def test_updatePicture(self):
        """ Tests for updatePicture
        
        """
        # Autogenerated test skeleton for updatePicture
        pass

    def test_addEntry(self):
        """ Tests for addEntry
        
        """
        # Autogenerated test skeleton for addEntry
        pass

    def test_boundingRect(self):
        """ Tests for boundingRect
        
        """
        # Autogenerated test skeleton for boundingRect
        pass

    def test_paint(self):
        """ Tests for paint
        
        """
        # Autogenerated test skeleton for paint
        pass

    def test_removeEntry(self):
        """ Tests for removeEntry
        
        """
        # Autogenerated test skeleton for removeEntry
        pass

    def test_shape(self):
        """ Tests for shape
        
        """
        # Autogenerated test skeleton for shape
        pass


class TestChartView(object):

    def test_full_example(self, view : ChartView, qtbot: QtBot):


        # A line chart_tests item (again)
        l = LineChartItem()
        x = np.arange(-30, 300, 0.2, dtype=np.float)
        y = np.sin(2 * np.pi * 3 / float(max(x) - min(x)) * x)
        l.plot(y, x, "a sine")

        view.addItem(l)
        view.autoRange()

        # Set legend visible
        view.setLegendVisible(True, ChartView.BOTTOM_LEFT)

        view.title = "A new title"
        view.horizontalLabel = "Timestamp"
        view.verticalLabel = "Velocity"

        qtbot.wait(DELAY)


    # def test_ChartView__layout_map_keys(self, qtbot: QtBot):
    #     """ Tests for ChartView__layout_map_keys
    #
    #     """
    #     # Autogenerated test skeleton for ChartView__layout_map_keys
    #     pass
    #
    # def test_ChartView__relayout(self, qtbot: QtBot):
    #     """ Tests for ChartView__relayout
    #
    #     """
    #     # Autogenerated test skeleton for ChartView__relayout
    #     pass
    #
    # def test_ChartView__toggle_apect1by1(self, qtbot: QtBot):
    #     """ Tests for ChartView__toggle_apect1by1
    #
    #     """
    #     # Autogenerated test skeleton for ChartView__toggle_apect1by1
    #     pass
    #
    # def test_ChartView__toggle_legend(self, qtbot: QtBot):
    #     """ Tests for ChartView__toggle_legend
    #
    #     """
    #     # Autogenerated test skeleton for ChartView__toggle_legend
    #     pass
    #
    # def test_make_legend(self, qtbot: QtBot):
    #     """ Tests for make_legend
    #
    #     """
    #     # Autogenerated test skeleton for make_legend
    #     pass
    #
    # def test_addItem(self, qtbot: QtBot):
    #     """ Tests for addItem
    #
    #     """
    #     # Autogenerated test skeleton for addItem
    #     pass
    #
    # def test_addSecondaryHorizontalAxis(self, qtbot: QtBot):
    #     """ Tests for addSecondaryHorizontalAxis
    #
    #     """
    #     # Autogenerated test skeleton for addSecondaryHorizontalAxis
    #     pass
    #
    # def test_addSecondaryVerticalAxis(self, qtbot: QtBot):
    #     """ Tests for addSecondaryVerticalAxis
    #
    #     """
    #     # Autogenerated test skeleton for addSecondaryVerticalAxis
    #     pass
    #
    # def test_add_chart_key(self, qtbot: QtBot):
    #     """ Tests for add_chart_key
    #
    #     """
    #     # Autogenerated test skeleton for add_chart_key
    #     pass
    #
    # def test_aspectRatio(self, qtbot: QtBot):
    #     """ Tests for aspectRatio
    #
    #     """
    #     # Autogenerated test skeleton for aspectRatio
    #     pass
    #
    # def test_autoRange(self, qtbot: QtBot):
    #     """ Tests for autoRange
    #
    #     """
    #     # Autogenerated test skeleton for autoRange
    #     pass
    #
    # def test_horizontalLabel(self, qtbot: QtBot):
    #     """ Tests for horizontalLabel
    #
    #     """
    #     # Autogenerated test skeleton for horizontalLabel
    #     pass
    #
    # def test_legend(self, qtbot: QtBot):
    #     """ Tests for legend
    #
    #     """
    #     # Autogenerated test skeleton for legend
    #     pass
    #
    # def test_removeItem(self, qtbot: QtBot):
    #     """ Tests for removeItem
    #
    #     """
    #     # Autogenerated test skeleton for removeItem
    #     pass
    #
    # def test_resizeEvent(self, qtbot: QtBot):
    #     """ Tests for resizeEvent
    #
    #     """
    #     # Autogenerated test skeleton for resizeEvent
    #     pass
    #
    # def test_setAspectRatio(self, qtbot: QtBot):
    #     """ Tests for setAspectRatio
    #
    #     """
    #     # Autogenerated test skeleton for setAspectRatio
    #     pass
    #
    # def test_setCoordinatesOrientation(self, qtbot: QtBot):
    #     """ Tests for setCoordinatesOrientation
    #
    #     """
    #     # Autogenerated test skeleton for setCoordinatesOrientation
    #     pass
    #
    # def test_setLegendVisible(self, qtbot: QtBot):
    #     """ Tests for setLegendVisible
    #
    #     """
    #     # Autogenerated test skeleton for setLegendVisible
    #     pass
    #
    # def test_setMaxVisibleRange(self, qtbot: QtBot):
    #     """ Tests for setMaxVisibleRange
    #
    #     """
    #     # Autogenerated test skeleton for setMaxVisibleRange
    #     pass
    #
    # def test_setRange(self, qtbot: QtBot):
    #     """ Tests for setRange
    #
    #     """
    #     # Autogenerated test skeleton for setRange
    #     pass
    #
    # def test_setVisibleRange(self, qtbot: QtBot):
    #     """ Tests for setVisibleRange
    #
    #     """
    #     # Autogenerated test skeleton for setVisibleRange
    #     pass
    #
    # def test_showEvent(self, qtbot: QtBot):
    #     """ Tests for showEvent
    #
    #     """
    #     # Autogenerated test skeleton for showEvent
    #     pass
    #
    # def test_title(self, qtbot: QtBot):
    #     """ Tests for title
    #
    #     """
    #     # Autogenerated test skeleton for title
    #     pass
    #
    # def test_verticalLabel(self, qtbot: QtBot):
    #     """ Tests for verticalLabel
    #
    #     """
    #     # Autogenerated test skeleton for verticalLabel
    #     pass


class TestChartWidget(object):

    def test_addSecondaryHorizontalAxis(self, qtbot: QtBot):
        """ Tests for addSecondaryHorizontalAxis

        """
        # Autogenerated test skeleton for addSecondaryHorizontalAxis
        pass

    def test_addSecondaryVerticalAxis(self, qtbot: QtBot):
        """ Tests for addSecondaryVerticalAxis

        """
        # Autogenerated test skeleton for addSecondaryVerticalAxis
        pass

    def test_boundingRect(self, qtbot: QtBot):
        """ Tests for boundingRect

        """
        # Autogenerated test skeleton for boundingRect
        pass

    def test_horizontalLabel(self, qtbot: QtBot):
        """ Tests for horizontalLabel

        """
        # Autogenerated test skeleton for horizontalLabel
        pass

    def test_paint(self, qtbot: QtBot):
        """ Tests for paint

        """
        # Autogenerated test skeleton for paint
        pass

    def test_title(self, qtbot: QtBot):
        """ Tests for title

        """
        # Autogenerated test skeleton for title
        pass

    def test_verticalLabel(self, qtbot: QtBot):
        """ Tests for verticalLabel

        """
        # Autogenerated test skeleton for verticalLabel
        pass

    def test_wheelEvent(self, qtbot: QtBot):
        """ Tests for wheelEvent

        """
        # Autogenerated test skeleton for wheelEvent
        pass


class TestHorizontalAxis(object):

    def test_generatePicture(self, qtbot: QtBot):
        """ Tests for generatePicture

        """
        # Autogenerated test skeleton for generatePicture
        pass

    def test_boundingRect(self, qtbot: QtBot):
        """ Tests for boundingRect

        """
        # Autogenerated test skeleton for boundingRect
        pass


class TestScaleBox(object):

    def test_boundingRect(self, qtbot: QtBot):
        """ Tests for boundingRect

        """
        # Autogenerated test skeleton for boundingRect
        pass

    def test_paint(self, qtbot: QtBot):
        """ Tests for paint

        """
        # Autogenerated test skeleton for paint
        pass


class TestSecondaryHorizontalAxis(object):

    def test_generatePicture(self, qtbot: QtBot):
        """ Tests for generatePicture

        """
        # Autogenerated test skeleton for generatePicture
        pass

    def test_boundingRect(self, qtbot: QtBot):
        """ Tests for boundingRect

        """
        # Autogenerated test skeleton for boundingRect
        pass

    def test_calcTicks(self, qtbot: QtBot):
        """ Tests for calcTicks

        """
        # Autogenerated test skeleton for calcTicks
        pass


class TestSecondaryVerticalAxis(object):

    def test_generatePicture(self, qtbot: QtBot):
        """ Tests for generatePicture

        """
        # Autogenerated test skeleton for generatePicture
        pass

    def test_boundingRect(self, qtbot: QtBot):
        """ Tests for boundingRect

        """
        # Autogenerated test skeleton for boundingRect
        pass

    def test_calcTicks(self, qtbot: QtBot):
        """ Tests for calcTicks

        """
        # Autogenerated test skeleton for calcTicks
        pass


class TestStyle(object):
    # autogenerator: no functions found
    pass


class TestVerticalAxis(object):

    def test_generatePicture(self, qtbot: QtBot):
        """ Tests for generatePicture

        """
        # Autogenerated test skeleton for generatePicture
        pass

    def test_boundingRect(self, qtbot: QtBot):
        """ Tests for boundingRect

        """
        # Autogenerated test skeleton for boundingRect
        pass


class TestVerticalChartLabel(object):

    def test_generatePicture(self, qtbot: QtBot):
        """ Tests for generatePicture

        """
        # Autogenerated test skeleton for generatePicture
        pass