#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
=============================
Test for qplotutils.chart.roi
=============================



Autogenerated package stub.
"""
import pytest
from pytestqt.qtbot import QtBot
import logging
import sys
import os
import numpy as np

from qtpy.QtCore import *
from qtpy.QtGui import *
from qtpy.QtOpenGL import *
from qtpy.QtWidgets import *

from qplotutils.chart.roi import *
from qplotutils.chart.view import ChartView

__author__ = "Philipp Baust"
__copyright__ = "Copyright 2019, Philipp Baust"
__credits__ = []
__license__ = "MIT"
__version__ = "0.0.2"
__maintainer__ = "Philipp Baust"
__email__ = "philipp.baust@gmail.com"
__status__ = "Development"

_log = logging.getLogger(__name__)

@pytest.fixture()
def view(qtbot : QtBot):
    view = ChartView(orientation=ChartView.CARTESIAN)
    view.resize(800, 800)
    view.show()

    qtbot.addWidget(view)

    return  view

DELAY = 2000

# class TestHandlePosition(object):
#     # autogenerator: no functions found
#     pass


class TestRectangularRegion(object):

    def test_roi(self, view : ChartView, qtbot : QtBot):
        roi = RectangularRegion(1, 0, 2, 1, 0.)
        roi.addHandle(ResizeHandle(position=HandlePosition.TOP))
        roi.addHandle(ResizeHandle(position=HandlePosition.LEFT))
        roi.addHandle(ResizeHandle(position=HandlePosition.BOTTOM))
        roi.addHandle(ResizeHandle(position=HandlePosition.RIGHT))
        roi.addHandle(RotateHandle(position=HandlePosition.RIGHT | HandlePosition.TOP))
        view.addItem(roi)

        qtbot.wait(DELAY)

    # def test_addHandle(self):
    #     """ Tests for addHandle
    #
    #     """
    #     # Autogenerated test skeleton for addHandle
    #     pass
    #
    # def test_boundingRect(self):
    #     """ Tests for boundingRect
    #
    #     """
    #     # Autogenerated test skeleton for boundingRect
    #     pass
    #
    # def test_handles(self):
    #     """ Tests for handles
    #
    #     """
    #     # Autogenerated test skeleton for handles
    #     pass
    #
    # def test_itemChange(self):
    #     """ Tests for itemChange
    #
    #     """
    #     # Autogenerated test skeleton for itemChange
    #     pass
    #
    # def test_mousePressEvent(self):
    #     """ Tests for mousePressEvent
    #
    #     """
    #     # Autogenerated test skeleton for mousePressEvent
    #     pass
    #
    # def test_mouseReleaseEvent(self):
    #     """ Tests for mouseReleaseEvent
    #
    #     """
    #     # Autogenerated test skeleton for mouseReleaseEvent
    #     pass
    #
    # def test_paint(self):
    #     """ Tests for paint
    #
    #     """
    #     # Autogenerated test skeleton for paint
    #     pass

    def test_removeHandle(self, view : ChartView, qtbot : QtBot):
        """ Tests for removeHandle

        """
        view.setVisibleRange(QRectF(-2, -2, 8, 8))
        roi = RectangularRegion(1, 0, 2, 1, rotation=0.)

        h1 = ResizeHandle(position=HandlePosition.TOP)
        h2 = ResizeHandle(position=HandlePosition.LEFT)

        roi.addHandle(h1)
        roi.addHandle(h2)
        view.addItem(roi)

        qtbot.wait(DELAY)

        roi.removeHandle(h1)

        qtbot.wait(DELAY)

    def test_move(self, view : ChartView, qtbot : QtBot):
        """ Tests for removeHandle

        """
        view.setVisibleRange(QRectF(-2, -2, 8, 8))
        roi = RectangularRegion(1, 0, 2, 1, rotation=0.)

        h1 = ResizeHandle(position=HandlePosition.TOP)
        h2 = ResizeHandle(position=HandlePosition.LEFT)

        roi.addHandle(h1)
        roi.addHandle(h2)
        view.addItem(roi)

        qtbot.wait(DELAY)

        # roi.mousePressEvent(None)  #
        pos = QPointF(200,200)
        e = QMouseEvent(QEvent.MouseButtonPress, pos, Qt.LeftButton,
                        Qt.LeftButton, Qt.NoModifier)
        view.mousePressEvent(e)


        qtbot.wait(DELAY)

    # def test_rotation(self):
    #     """ Tests for rotation
    #
    #     """
    #     # Autogenerated test skeleton for rotation
    #     pass
    #
    # def test_setRotation(self):
    #     """ Tests for setRotation
    #
    #     """
    #     # Autogenerated test skeleton for setRotation
    #     pass
    #
    # def test_updatePath(self):
    #     """ Tests for updatePath
    #
    #     """
    #     # Autogenerated test skeleton for updatePath
    #     pass


# class TestResizeHandle(object):
#
#     def test_boundingRect(self):
#         """ Tests for boundingRect
#
#         """
#         # Autogenerated test skeleton for boundingRect
#         pass
#
#     def test_itemChange(self):
#         """ Tests for itemChange
#
#         """
#         # Autogenerated test skeleton for itemChange
#         pass
#
#     def test_mousePressEvent(self):
#         """ Tests for mousePressEvent
#
#         """
#         # Autogenerated test skeleton for mousePressEvent
#         pass
#
#     def test_mouseReleaseEvent(self):
#         """ Tests for mouseReleaseEvent
#
#         """
#         # Autogenerated test skeleton for mouseReleaseEvent
#         pass
#
#     def test_paint(self):
#         """ Tests for paint
#
#         """
#         # Autogenerated test skeleton for paint
#         pass
#
#
# class TestRoiHandle(object):
#
#     def test_hoverEnterEvent(self):
#         """ Tests for hoverEnterEvent
#
#         """
#         # Autogenerated test skeleton for hoverEnterEvent
#         pass
#
#     def test_hoverLeaveEvent(self):
#         """ Tests for hoverLeaveEvent
#
#         """
#         # Autogenerated test skeleton for hoverLeaveEvent
#         pass
#
#     def test_paint(self):
#         """ Tests for paint
#
#         """
#         # Autogenerated test skeleton for paint
#         pass
#
#     def test_updatePosition(self):
#         """ Tests for updatePosition
#
#         """
#         # Autogenerated test skeleton for updatePosition
#         pass
#
#
# class TestRoiState(object):
#     # autogenerator: no functions found
#     pass
#
#
# class TestRotateHandle(object):
#
#     def test_boundingRect(self):
#         """ Tests for boundingRect
#
#         """
#         # Autogenerated test skeleton for boundingRect
#         pass
#
#     def test_itemChange(self):
#         """ Tests for itemChange
#
#         """
#         # Autogenerated test skeleton for itemChange
#         pass
#
#     def test_mousePressEvent(self):
#         """ Tests for mousePressEvent
#
#         """
#         # Autogenerated test skeleton for mousePressEvent
#         pass
#
#     def test_mouseReleaseEvent(self):
#         """ Tests for mouseReleaseEvent
#
#         """
#         # Autogenerated test skeleton for mouseReleaseEvent
#         pass
#
#     def test_paint(self):
#         """ Tests for paint
#
#         """
#         # Autogenerated test skeleton for paint
#         pass
#
#     def test_updatePosition(self):
#         """ Tests for updatePosition
#
#         """
#         # Autogenerated test skeleton for updatePosition
#         pass
#
#
# class TestVec2(object):
#
#     def test__add__(self):
#         """ Tests for _add__
#
#         """
#         # Autogenerated test skeleton for _add__
#         pass
#
#     def test__mul__(self):
#         """ Tests for _mul__
#
#         """
#         # Autogenerated test skeleton for _mul__
#         pass
#
#     def test__sub__(self):
#         """ Tests for _sub__
#
#         """
#         # Autogenerated test skeleton for _sub__
#         pass
#
#     def test_angle(self):
#         """ Tests for angle
#
#         """
#         # Autogenerated test skeleton for angle
#         pass
#
#     def test_array(self):
#         """ Tests for array
#
#         """
#         # Autogenerated test skeleton for array
#         pass
#
#     def test_cross(self):
#         """ Tests for cross
#
#         """
#         # Autogenerated test skeleton for cross
#         pass
#
#     def test_dot(self):
#         """ Tests for dot
#
#         """
#         # Autogenerated test skeleton for dot
#         pass
#
#     def test_qpointF(self):
#         """ Tests for qpointF
#
#         """
#         # Autogenerated test skeleton for qpointF
#         pass
#
#     def test_rotate(self):
#         """ Tests for rotate
#
#         """
#         # Autogenerated test skeleton for rotate
#         pass
#
#     def test_x(self):
#         """ Tests for x
#
#         """
#         # Autogenerated test skeleton for x
#         pass
#
#     def test_y(self):
#         """ Tests for y
#
#         """
#         # Autogenerated test skeleton for y
#         pass