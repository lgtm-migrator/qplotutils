#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
===============================
Test for qplotutils.chart.color
===============================



Autogenerated package stub.
"""
import pytest

from qplotutils.chart.color import *

__author__ = "Philipp Baust"
__copyright__ = "Copyright 2019, Philipp Baust"
__credits__ = []
__license__ = "MIT"
__version__ = "0.0.2"
__maintainer__ = "Philipp Baust"
__email__ = "philipp.baust@gmail.com"
__status__ = "Development"

_log = logging.getLogger(__name__)


class TestColormap(object):
    def test_lut_index(self):
        with pytest.raises(Exception):
            Colormap.lut_index(1.1)

        assert Colormap.lut_index(0) == 0
        assert Colormap.lut_index(1) == Colormap.N - 1
        assert Colormap.lut_index(0.5) == Colormap.N / 2

    def test_Colormap_with_alpha(self):
        """ Tests for Colormap__channel_gradient
        
        """
        pass

    def test_faulty_mapping(self):
        """ Broken color mapping. """
        _color_def = {
            "red": ((0, 0, 0), (1, 1, 1)),
            "green": ((0, 0, 0), (1, 1, 1)),
            "blue": ((0, 0, 0), (1, 1, 1)),
            "alpha": ((1, 1, 1), (1, 1, 1)),  # faulty
            "masked": (1, 0, 0, 1),
        }
        with pytest.raises(QPlotUtilsException):
            Colormap(_color_def)

    def test__call__(self):
        """ Tests for _call__
        
        """
        _color_def = {
            "red": ((0, 0, 0), (1, 1, 1)),
            "green": ((0, 0, 0), (1, 1, 1)),
            "blue": ((0, 0, 0), (1, 1, 1)),
            "alpha": ((0, 1, 1), (1, 1, 1)),
            "masked": (1, 0, 0, 1),
        }
        cm = Colormap(_color_def)
        normalize = Normalize(0, 100)

        # expect color rgba 0,0,0,1
        r = cm(normalize(0))
        assert r[0] == 0
        assert r[1] == 0
        assert r[2] == 0
        assert r[3] == 1

        # expect color rgba 0.5,0.5,0.5,1
        r = cm(normalize(50))
        assert r[0] == 128 / 255
        assert r[1] == 128 / 255
        assert r[2] == 128 / 255
        assert r[3] == 1

        r = cm(normalize(100))
        assert r[0] == 1
        assert r[1] == 1
        assert r[2] == 1
        assert r[3] == 1

        r = cm(normalize(100.001))
        assert r[0] == 1
        assert r[1] == 0
        assert r[2] == 0
        assert r[3] == 1

        r = cm(normalize(-0.001))
        assert r[0] == 1
        assert r[1] == 0
        assert r[2] == 0
        assert r[3] == 1

    def test_without_alpha(self):
        _color_def = {
            "red": ((0, 0, 0), (1, 1, 1)),
            "green": ((0, 0, 0), (1, 1, 1)),
            "blue": ((0, 0, 0), (1, 1, 1)),
            "masked": (1, 0, 0, 1),
        }
        cm = Colormap(_color_def)
        normalize = Normalize(0, 100)

        r = cm(normalize(0))
        assert r[3] == 1

    def test_without_masked(self):
        _color_def = {
            "red": ((0, 0, 0), (1, 1, 1)),
            "green": ((0, 0, 0), (1, 1, 1)),
            "blue": ((0, 0, 0), (1, 1, 1)),
        }
        cm = Colormap(_color_def)
        normalize = Normalize(0, 100)

        r = cm(normalize(110))
        assert r[3] == 0


class TestNormalize(object):
    def test__call__(self):
        """ Tests for _call__
        
        """
        normalize = Normalize(0, 100)

        assert normalize(50) == 0.5
        assert np.ma.is_masked(normalize(110))
